{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["routeClient","ApolloClient","uri","cache","InMemoryCache","GET_ROUTE","gql","App","React","forwardRef","props","ref","customTheme","createMuiTheme","palette","type","responsiveFontSizes","classes","makeStyles","theme","root","flexGrow","title","textAlign","mainContent","breakpoints","up","width","margin","padding","useStyles","useState","address","setAddress","DelayedRoute","useLazyQuery","getRoute","loading","error","data","a","handleAddress","result","resData","features","geometry","coordinates","variables","fromLat","fromLon","TextField","autoFocus","id","label","value","onChange","target","inputProps","maxLength","Button","onClick","handleClick","List","plan","itineraries","map","index","entry","legs","innerIndex","innerEntry","ListItem","ListItemText","primary","mode","secondary","Fragment","Date","startTime","toString","endTime","fetch","res","json","client","ThemeProvider","CssBaseline","className","AppBar","position","Toolbar","Typography","variant","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea329d77.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {\n  createMuiTheme, responsiveFontSizes, makeStyles, ThemeProvider,\n} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {\n  AppBar, Toolbar, Container, TextField, Button, List, ListItem, ListItemText,\n} from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\n\nimport {\n  ApolloClient, InMemoryCache, gql, ApolloProvider, useLazyQuery,\n} from '@apollo/client';\n\nconst routeClient = new ApolloClient({\n  uri: 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql',\n  cache: new InMemoryCache(),\n});\n\nconst GET_ROUTE = gql`\n  query Route($fromLat: Float!, $fromLon: Float!) {\n    plan(\n      from: {lat: $fromLat, lon: $fromLon}\n      to: {lat: 60.16736926540844, lon: 24.921782530681504}\n      numItineraries: 3\n    ) {\n      itineraries {\n        legs {\n          startTime\n          endTime\n          mode\n          duration\n          realTime\n          distance\n          transitLeg\n        }\n      }\n    }\n  }`;\n\nconst App = React.forwardRef((props, ref) => {\n  let customTheme = createMuiTheme({\n    palette: {\n      type: 'dark',\n    },\n  });\n  customTheme = responsiveFontSizes(customTheme);\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    title: {\n      flexGrow: 1,\n      textAlign: 'center',\n    },\n    mainContent: {\n      [theme.breakpoints.up('sm')]: {\n        width: '75%',\n        margin: '0 auto',\n        padding: '30px',\n      },\n      textAlign: 'center',\n    },\n  }));\n\n  const classes = useStyles();\n\n  const [address, setAddress] = useState('');\n\n  /**\n   * @return {div}\n   */\n  function DelayedRoute() {\n    const [getRoute, {loading, error, data}] = useLazyQuery(GET_ROUTE);\n\n    if (loading) return (<p>Loading...</p>);\n    if (error) return (<p>Error :(</p>);\n\n    /** */\n    async function handleClick() {\n      const result = await handleAddress();\n      const resData = result.features[0].geometry.coordinates;\n      getRoute({variables: {fromLat: resData[1], fromLon: resData[0]}});\n    }\n\n    return (\n      <div>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          type=\"string\"\n          id=\"form-name\"\n          label=\"Starting address\"\n          value={address}\n          onChange={(address) => setAddress(address.target.value)}\n          inputProps={{maxLength: 100}}\n        />\n        <br />\n        <Button onClick={() => handleClick()}>\n          Get routes\n        </Button>\n        <br />\n        <List>\n          {data && data.plan.itineraries.map((index, entry) => (\n            <div key={index}>\n              <p>Itinerary</p>\n              {entry.legs.map((innerIndex, innerEntry) => (\n                <div key={innerIndex}>\n                  <ListItem>\n                    <ListItemText\n                      primary={innerEntry.mode}\n                      secondary={\n                        <React.Fragment>\n                          Leg start time:\n                          {new Date(innerEntry.startTime).toString()}\n                          <br />\n                      Leg end time: {new Date(innerEntry.endTime).toString()}\n                        </React.Fragment>\n                      }>\n                    </ListItemText>\n                  </ListItem>\n                </div>\n              ))}\n            </div>\n          ))}\n        </List>\n      </div>\n    );\n  }\n\n  /** */\n  async function handleAddress() {\n    const res = await fetch('https://api.digitransit.fi/geocoding/v1/search?text=' + address + '&size=1');\n    const data = await res.json();\n    return data;\n  }\n\n  return (\n    <ApolloProvider client={routeClient}>\n      <ThemeProvider theme={customTheme}>\n        <CssBaseline />\n        <div className=\"App\">\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h4\" className={classes.title}>\n                Timetables App\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          <main>\n            <Container className={classes.mainContent}>\n              <div>\n                <DelayedRoute></DelayedRoute>\n              </div>\n            </Container>\n          </main>\n        </div>\n      </ThemeProvider>\n    </ApolloProvider>\n  );\n});\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}