{"version":3,"sources":["reducers/routesReducer.js","store/routesStore.js","functions/formatTime.js","actions/setBool.js","actions/setOpen.js","components/DelayedRoute.js","components/MoreInfo.js","actions/setAddress.js","actions/setStarting.js","actions/setEmpty.js","components/AddressSearch.js","App.js","actions/setData.js","reportWebVitals.js","index.js"],"names":["initialState","routes","content","isOpen","address","startingAddress","isEmpty","routeReducer","state","action","type","Object","assign","payload","store","createStore","routesReducer","formatTime","time","date","Date","hours","getHours","minutes","getMinutes","setBool","setOpen","window","useStyles","makeStyles","theme","title","flexGrow","textAlign","entry","borderRadius","margin","customBtn","marginLeft","buttonDiv","marginBottom","Routes","connect","classes","Typography","variant","className","List","keys","length","plan","itineraries","map","index","ListItem","button","onClick","e","event","dispatch","handleOpen","ListItemText","primary","Fragment","Math","ceil","duration","secondary","startTime","endTime","Info","Dialog","onClose","aria-labelledby","open","DialogTitle","id","DialogContent","legs","mode","trip","routeShortName","from","stop","to","name","setAddress","setStarting","setEmpty","GET_ROUTE","gql","connAddress","useLazyQuery","onCompleted","setData","data","getRoute","a","handleAddress","result","resData","features","geometry","coordinates","variables","fromLat","fromLon","fetch","res","json","TextField","error","autoFocus","label","value","onChange","addressChange","target","inputProps","maxLength","Button","handleClick","routeClient","ApolloClient","uri","cache","InMemoryCache","App","React","forwardRef","props","ref","useState","brightness","setBrightness","customTheme","createMuiTheme","palette","responsiveFontSizes","root","mainContent","breakpoints","up","width","padding","marginTop","background","paper","client","ThemeProvider","CssBaseline","AppBar","position","Toolbar","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1012208d.chunk.js","sourcesContent":["const initialState = {\n  routes: {},\n  content: {},\n  isOpen: false,\n  address: '',\n  startingAddress: '',\n  isEmpty: false,\n};\n\n/**\n * @param {state} state\n * @param {action} action\n * @return {function}\n*/\nfunction routeReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'SET_DATA':\n      return Object.assign({}, state, {\n        routes: action.payload,\n      });\n    case 'SET_OPEN':\n      return Object.assign({}, state, {\n        content: action.payload,\n      });\n    case 'SET_BOOL':\n      return Object.assign({}, state, {\n        isOpen: action.payload,\n      });\n    case 'SET_ADDRESS':\n      return Object.assign({}, state, {\n        address: action.payload,\n      });\n    case 'SET_STARTING':\n      return Object.assign({}, state, {\n        startingAddress: action.payload,\n      });\n    case 'SET_EMPTY':\n      return Object.assign({}, state, {\n        isEmpty: action.payload,\n      });\n    default:\n      return state;\n  }\n}\n\nexport default routeReducer;\n","import {createStore} from 'redux';\nimport routesReducer from '../reducers/routesReducer';\n\nconst store = createStore(routesReducer);\n\nexport default store;\n","/**\n   *@param {Number} time\n   * @return {String}\n  */\nexport default function formatTime(time) {\n  const date = new Date(time);\n  let hours = date.getHours();\n  if (hours < 10) {\n    hours = '0' + hours;\n  }\n  let minutes = date.getMinutes();\n  if (minutes < 10) {\n    minutes = '0' + minutes;\n  }\n  const timeAsString = hours + ':' + minutes;\n  return timeAsString;\n}\n","\n/**\n * @param {payload} payload\n * @return {function}\n*/\nexport function setBool(payload) {\n  return {type: 'SET_BOOL', payload};\n}\n","/**\n * @param {payload} payload\n * @return {function}\n*/\nexport function setOpen(payload) {\n  return {type: 'SET_OPEN', payload};\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  List, ListItem, ListItemText,\n} from '@material-ui/core';\nimport {connect} from 'react-redux';\nimport {\n  makeStyles,\n} from '@material-ui/core/styles';\nimport formatTime from '../functions/formatTime';\nimport PropTypes from 'prop-types';\nimport {setBool} from '../actions/setBool';\nimport {setOpen} from '../actions/setOpen';\nimport store from '../store/routesStore';\n\nwindow.store = store;\nwindow.setOpen = setOpen;\nwindow.setBool = setBool;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 1,\n    textAlign: 'center',\n  },\n  entry: {\n    borderRadius: '25px',\n    margin: '10px',\n  },\n  customBtn: {\n    marginLeft: '5vh',\n  },\n  buttonDiv: {\n    marginBottom: '2vh',\n  },\n}));\n\nconst mapStateToProps = (state) => {\n  return {\n    content: state.content,\n    isOpen: state.isOpen,\n    routes: state.routes,\n    address: state.address,\n    startingAddress: state.startingAddress,\n  };\n};\n\n/**\n* @return {div}\n*/\nfunction DelayedRoute({content, isOpen, routes, address, startingAddress}) {\n  DelayedRoute.propTypes = {\n    content: PropTypes.object,\n    isOpen: PropTypes.bool,\n    routes: PropTypes.object,\n    address: PropTypes.string,\n    startingAddress: PropTypes.string,\n  };\n\n  const classes = useStyles();\n\n  /**\n   *@param {Object} event\n   *@param {Object} entry\n  */\n  function handleOpen(event, entry) {\n    store.dispatch(setOpen(entry));\n    store.dispatch(setBool(true));\n  }\n\n  return (\n    <div>\n      <Typography variant=\"h5\" className={classes.title}>\n        {startingAddress !== '' ?\n            startingAddress + ' - Maria 01' : <></>}\n      </Typography>\n      <br />\n      <List>\n        {Object.keys(routes).length != 0 &&\n          routes.plan.itineraries.map((entry, index) => (\n            <div key={index}>\n              <ListItem button className={classes.entry}\n                onClick={((e) => handleOpen(e, entry))}>\n                <ListItemText\n                  primary={\n                    <React.Fragment>\n                      <Typography variant=\"h5\">\n                        {'Route - ' + (index + 1) + ' / ' +\n                          Math.ceil(entry.duration / 60) + 'min'}\n                      </Typography>\n                    </React.Fragment>\n                  }\n                  secondary={\n                    <React.Fragment>\n                      <Typography variant=\"h5\">\n                        {formatTime(entry.startTime)}&nbsp;\n                      -&nbsp;{formatTime(entry.endTime)}\n                      </Typography>\n                    </React.Fragment>\n                  }>\n                </ListItemText>\n              </ListItem>\n            </div>\n          ))}\n      </List>\n    </div>\n  );\n};\n\nconst Routes = connect(mapStateToProps)(DelayedRoute);\n\nexport default Routes;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport formatTime from '../functions/formatTime';\nimport {\n  ListItem, ListItemText, Dialog, DialogTitle, DialogContent,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport {\n  makeStyles,\n} from '@material-ui/core/styles';\nimport {setBool} from '../actions/setBool';\nimport {setOpen} from '../actions/setOpen';\nimport store from '../store/routesStore';\nimport {connect} from 'react-redux';\n\nwindow.store = store;\nwindow.setOpen = setOpen;\nwindow.setBool = setBool;\n\nconst mapStateToProps = (state) => {\n  return {\n    content: state.content,\n    isOpen: state.isOpen,\n    routes: state.routes};\n};\n\n/**\n * @return {div}\n*/\nfunction MoreInfo({content, isOpen, routes}) {\n  const useStyles = makeStyles((theme) => ({\n    entry: {\n      borderRadius: '25px',\n      margin: '10px',\n    },\n  }));\n\n  const classes = useStyles();\n\n  MoreInfo.propTypes = {\n    content: PropTypes.object,\n    isOpen: PropTypes.bool,\n    routes: PropTypes.object,\n  };\n\n  const handleClose = () => {\n    store.dispatch(setBool(false));\n  };\n\n  return (\n    <Dialog\n      onClose={handleClose}\n      aria-labelledby=\"simple-dialog-title\"\n      open={isOpen}\n    >\n      <DialogTitle\n        id=\"simple-dialog-title\">\n        <Typography variant=\"h5\">Route info</Typography>\n      </DialogTitle>\n      <DialogContent>\n        {Object.keys(content).length != 0 ?\n        content.legs.map((entry, index) => (\n          <div key={index} className={classes.entry}>\n            <ListItem>\n              <ListItemText\n                primary={\n                  <React.Fragment>\n                    <Typography variant=\"h5\">\n                      {entry.mode +\n                          (entry.trip ?\n                            ' ' + entry.trip.routeShortName :\n                            '') + ' - ' +\n                            Math.ceil(entry.duration / 60) + 'min'}\n                    </Typography>\n                  </React.Fragment>\n                }\n                secondary={\n                  <React.Fragment>\n                    <Typography variant=\"h5\">\n                      {entry.from.stop && entry.to.stop ?\n                          entry.from.stop.name +\n                          ' - ' +\n                          entry.to.stop.name :\n                          entry.from.name +\n                          ' - ' +\n                          entry.to.name}\n                      <br />\n                      {formatTime(entry.startTime)}&nbsp;\n                      -&nbsp;{formatTime(entry.endTime)}\n                    </Typography>\n                  </React.Fragment>\n                }>\n              </ListItemText>\n            </ListItem>\n          </div>\n        )) : <></>}\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nconst Info = connect(mapStateToProps)(MoreInfo);\n\nexport default Info;\n","/**\n * @param {payload} payload\n * @return {function}\n*/\nexport function setAddress(payload) {\n  return {type: 'SET_ADDRESS', payload};\n}\n","/**\n * @param {payload} payload\n * @return {function}\n*/\nexport function setStarting(payload) {\n  return {type: 'SET_STARTING', payload};\n}\n","/**\n * @param {payload} payload\n * @return {function}\n*/\nexport function setEmpty(payload) {\n  return {type: 'SET_EMPTY', payload};\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  TextField, Button,\n} from '@material-ui/core';\nimport {connect} from 'react-redux';\nimport {\n  gql, useLazyQuery,\n} from '@apollo/client';\nimport {\n  makeStyles,\n} from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport {setAddress} from '../actions/setAddress';\nimport {setStarting} from '../actions/setStarting';\nimport {setEmpty} from '../actions/setEmpty';\nimport store from '../store/routesStore';\n\nwindow.store = store;\nwindow.setAddress = setAddress;\nwindow.setStarting = setStarting;\nwindow.setEmpty = setEmpty;\n\nconst mapStateToProps = (state) => {\n  return {\n    address: state.address,\n    startingAddress: state.startingAddress,\n    isEmpty: state.isEmpty,\n  };\n};\n\nconst GET_ROUTE = gql`\n  query Route($fromLat: Float!, $fromLon: Float!) {\n    plan(\n      from: {lat: $fromLat, lon: $fromLon}\n      to: {lat: 60.16736926540844, lon: 24.921782530681504}\n      numItineraries: 5\n    ) {\n      itineraries {\n        startTime\n        endTime\n        duration\n        walkDistance\n        legs {\n          startTime\n          endTime\n          mode\n          duration\n          realTime\n          distance\n          transitLeg\n          from {\n            lat\n            lon\n            name\n            stop {\n              code\n              name\n            }\n          }\n          to {\n            lat\n            lon\n            name\n            stop {\n              code\n              name\n            }\n          }\n          trip {\n            tripHeadsign\n            routeShortName\n          }\n        }\n      }\n    }\n  }`;\n\nconst useStyles = makeStyles((theme) => ({\n  customBtn: {\n    marginLeft: '5vh',\n  },\n  buttonDiv: {\n    marginBottom: '2vh',\n  },\n}));\n\n/**\n* @return {div}\n*/\nfunction AddressSearch({address, startingAddress, isEmpty}) {\n  AddressSearch.propTypes = {\n    address: PropTypes.string,\n    startingAddress: PropTypes.string,\n    isEmpty: PropTypes.bool,\n  };\n\n  const classes = useStyles();\n\n  const [getRoute, {data}] =\n      useLazyQuery(GET_ROUTE, {\n        onCompleted: () => {\n          store.dispatch(setData(data));\n        },\n      });\n\n\n  /** */\n  async function handleClick() {\n    if (address) {\n      const result = await handleAddress();\n      const resData = result.features[0].geometry.coordinates;\n      getRoute({variables: {fromLat: resData[1], fromLon: resData[0]}});\n      store.dispatch(setStarting(address));\n    } else {\n      store.dispatch(setEmpty(true));\n    }\n  }\n\n  /** */\n  async function handleAddress() {\n    const res = await fetch('https://api.digitransit.fi/geocoding/v1/search?text=' + address + '&size=1');\n    const data = await res.json();\n    return data;\n  }\n\n  /**\n   * @param {String} address\n  */\n  function addressChange(address) {\n    store.dispatch(setEmpty(false));\n    store.dispatch(setAddress(address));\n  }\n\n  return (\n    <div className={classes.buttonDiv}>\n      <TextField\n        error={isEmpty}\n        autoFocus\n        margin=\"dense\"\n        type=\"string\"\n        id=\"form-name\"\n        label=\"Starting address\"\n        value={address}\n        onChange={(address) => addressChange(address.target.value)}\n        inputProps={{maxLength: 100}}\n      />\n      <Button\n        className={classes.customBtn}\n        variant='contained' onClick={() => handleClick()}>\n        <Typography variant=\"h5\">\n          Get timetable\n        </Typography>\n      </Button>\n    </div>);\n}\n\nconst connAddress = connect(mapStateToProps)(AddressSearch);\n\nexport default connAddress;\n","import React, {useState} from 'react';\nimport {\n  createMuiTheme, responsiveFontSizes, makeStyles, ThemeProvider,\n} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {\n  AppBar, Toolbar, Container, Button,\n} from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Brightness3Icon from '@material-ui/icons/Brightness3';\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\nimport {\n  ApolloClient, InMemoryCache, ApolloProvider,\n} from '@apollo/client';\nimport store from './store/routesStore';\nimport {setData} from './actions/setData';\nimport DelayedRoute from './components/DelayedRoute';\nimport MoreInfo from './components/MoreInfo';\nimport AddressSearch from './components/AddressSearch';\nimport {setBool} from './actions/setBool';\nimport {setOpen} from './actions/setOpen';\n\nwindow.store = store;\nwindow.setData = setData;\nwindow.setOpen = setOpen;\nwindow.setBool = setBool;\n\nconst routeClient = new ApolloClient({\n  uri: 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql',\n  cache: new InMemoryCache(),\n});\n\nconst App = React.forwardRef((props, ref) => {\n  const [brightness, setBrightness] = useState('light');\n\n  // store.subscribe(() => console.log('state', store.getState()));\n\n  let customTheme = createMuiTheme({\n    palette: {\n      type: brightness,\n    },\n  });\n  customTheme = responsiveFontSizes(customTheme);\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    title: {\n      flexGrow: 1,\n      textAlign: 'center',\n    },\n    mainContent: {\n      [theme.breakpoints.up('sm')]: {\n        width: '75%',\n        margin: '0 auto',\n        padding: '30px',\n        borderRadius: '25px',\n        marginTop: '2vh',\n      },\n      textAlign: 'center',\n      backgroundColor: customTheme.palette.background.paper,\n      minHeight: '80vh',\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <ApolloProvider client={routeClient}>\n      <ThemeProvider theme={customTheme}>\n        <CssBaseline />\n        <div className=\"App\">\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography>\n                  Aleksi Heikkilä, 2021\n              </Typography>\n              <Typography variant=\"h4\" className={classes.title}>\n                  Timetables App\n              </Typography>\n              {brightness === 'light' ?\n                  <Button\n                    onClick={() => setBrightness('dark')}>\n                    <Brightness3Icon />\n                  </Button> :\n                  <Button\n                    onClick={() => setBrightness('light')}>\n                    <WbSunnyIcon />\n                  </Button>}\n            </Toolbar>\n          </AppBar>\n          <main>\n            <Container className={classes.mainContent}>\n              <div>\n                <AddressSearch></AddressSearch>\n                <MoreInfo></MoreInfo>\n                <DelayedRoute></DelayedRoute>\n              </div>\n            </Container>\n          </main>\n        </div>\n      </ThemeProvider>\n    </ApolloProvider>\n  );\n});\n\nexport default App;\n","/**\n * @param {payload} payload\n * @return {function}\n*/\nexport function setData(payload) {\n  return {type: 'SET_DATA', payload};\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport store from './store/routesStore';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>\n    ,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}