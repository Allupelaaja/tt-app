{"version":3,"sources":["reducers/routesReducer.js","store/routesStore.js","functions/formatTime.js","components/DelayedRoute.js","App.js","actions/setData.js","reportWebVitals.js","index.js"],"names":["initialState","routes","routeReducer","state","action","type","Object","assign","payload","store","createStore","routesReducer","formatTime","time","date","Date","hours","getHours","minutes","getMinutes","GET_ROUTE","gql","useStyles","makeStyles","theme","title","flexGrow","textAlign","entry","borderRadius","margin","customBtn","marginLeft","buttonDiv","marginBottom","Routes","connect","setRoute","setOpen","useState","address","setAddress","useLazyQuery","onCompleted","dispatch","setData","data","getRoute","loading","error","classes","a","handleAddress","result","resData","features","geometry","coordinates","variables","fromLat","fromLon","fetch","res","json","className","TextField","autoFocus","id","label","value","onChange","target","inputProps","maxLength","Button","variant","onClick","handleClick","Typography","List","keys","length","plan","itineraries","map","index","ListItem","button","e","event","handleOpen","ListItemText","primary","Fragment","Math","ceil","duration","secondary","startTime","endTime","window","routeClient","ApolloClient","uri","cache","InMemoryCache","App","React","forwardRef","props","ref","brightness","setBrightness","subscribe","console","log","getState","customTheme","createMuiTheme","palette","responsiveFontSizes","root","mainContent","breakpoints","up","width","padding","marginTop","background","paper","open","route","MoreInfo","Dialog","onClose","handleClose","aria-labelledby","DialogTitle","DialogContent","legs","mode","trip","routeShortName","from","stop","to","name","client","ThemeProvider","CssBaseline","AppBar","position","Toolbar","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8bf5b278.chunk.js","sourcesContent":["const initialState = {\n  routes: {},\n};\n\n// eslint-disable-next-line require-jsdoc\nfunction routeReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'SET_DATA':\n      return Object.assign({}, state, {\n        routes: action.payload,\n      });\n    default:\n      return state;\n  }\n}\n\nexport default routeReducer;\n","import {createStore} from 'redux';\nimport routesReducer from '../reducers/routesReducer';\n\nconst store = createStore(routesReducer);\n\nexport default store;\n","/**\n   *@param {Number} time\n   * @return {String}\n  */\nexport default function formatTime(time) {\n  const date = new Date(time);\n  let hours = date.getHours();\n  if (hours < 10) {\n    hours = '0' + hours;\n  }\n  let minutes = date.getMinutes();\n  if (minutes < 10) {\n    minutes = '0' + minutes;\n  }\n  const timeAsString = hours + ':' + minutes;\n  return timeAsString;\n}\n","import React, {useState} from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  TextField, Button, List, ListItem, ListItemText,\n} from '@material-ui/core';\nimport {connect} from 'react-redux';\nimport {\n  gql, useLazyQuery,\n} from '@apollo/client';\nimport {\n  makeStyles,\n} from '@material-ui/core/styles';\nimport formatTime from '../functions/formatTime';\nimport PropTypes from 'prop-types';\n\nconst GET_ROUTE = gql`\n  query Route($fromLat: Float!, $fromLon: Float!) {\n    plan(\n      from: {lat: $fromLat, lon: $fromLon}\n      to: {lat: 60.16736926540844, lon: 24.921782530681504}\n      numItineraries: 5\n    ) {\n      itineraries {\n        startTime\n        endTime\n        duration\n        walkDistance\n        legs {\n          startTime\n          endTime\n          mode\n          duration\n          realTime\n          distance\n          transitLeg\n          from {\n            lat\n            lon\n            name\n            stop {\n              code\n              name\n            }\n          }\n          to {\n            lat\n            lon\n            name\n            stop {\n              code\n              name\n            }\n          }\n          trip {\n            tripHeadsign\n            routeShortName\n          }\n        }\n      }\n    }\n  }`;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 1,\n    textAlign: 'center',\n  },\n  entry: {\n    borderRadius: '25px',\n    margin: '10px',\n  },\n  customBtn: {\n    marginLeft: '5vh',\n  },\n  buttonDiv: {\n    marginBottom: '2vh',\n  },\n}));\n\nconst mapStateToProps = (state) => {\n  return {routes: state.routes};\n};\n\n/**\n* @param {setRoute} setRoute\n* @param {setOpen} setOpen\n* @return {div}\n*/\nfunction DelayedRoute({routes, setRoute, setOpen}) {\n  const [address, setAddress] = useState('');\n  const [getRoute, {loading, error, data}] =\n      useLazyQuery(GET_ROUTE, {\n        onCompleted: () => {\n          store.dispatch(setData(data));\n        },\n      });\n\n  DelayedRoute.propTypes = {\n    setRoute: PropTypes.func,\n    setOpen: PropTypes.func,\n    routes: PropTypes.object,\n  };\n\n  const classes = useStyles();\n\n  if (loading) return (<p>Loading...</p>);\n  if (error) return (<p>Error :(</p>);\n\n  /** */\n  async function handleClick() {\n    const result = await handleAddress();\n    const resData = result.features[0].geometry.coordinates;\n    getRoute({variables: {fromLat: resData[1], fromLon: resData[0]}});\n  }\n\n  /** */\n  async function handleAddress() {\n    const res = await fetch('https://api.digitransit.fi/geocoding/v1/search?text=' + address + '&size=1');\n    const data = await res.json();\n    return data;\n  }\n\n  /**\n   *@param {Object} event\n   *@param {Object} entry\n  */\n  function handleOpen(event, entry) {\n    setRoute(entry);\n    setOpen(true);\n  }\n\n  return (\n    <div>\n      <div className={classes.buttonDiv}>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          type=\"string\"\n          id=\"form-name\"\n          label=\"Starting address\"\n          value={address}\n          onChange={(address) => setAddress(address.target.value)}\n          inputProps={{maxLength: 100}}\n        />\n        <Button\n          className={classes.customBtn}\n          variant='contained' onClick={() => handleClick()}>\n          <Typography variant=\"h5\">\n          Get timetable\n          </Typography>\n        </Button>\n      </div>\n      <Typography variant=\"h5\" className={classes.title}>\n        {address !== '' ?\n            address + ' - Maria 01' : <></>}\n      </Typography>\n      <br />\n      <List>\n        {Object.keys(routes).length != 0 &&\n          routes.plan.itineraries.map((entry, index) => (\n            <div key={index}>\n              <ListItem button className={classes.entry}\n                onClick={((e) => handleOpen(e, entry))}>\n                <ListItemText\n                  primary={\n                    <React.Fragment>\n                      <Typography variant=\"h5\">\n                        {'Route - ' + (index + 1) + ' / ' +\n                          Math.ceil(entry.duration / 60) + 'min'}\n                      </Typography>\n                    </React.Fragment>\n                  }\n                  secondary={\n                    <React.Fragment>\n                      <Typography variant=\"h5\">\n                        {formatTime(entry.startTime)}&nbsp;\n                      -&nbsp;{formatTime(entry.endTime)}\n                      </Typography>\n                    </React.Fragment>\n                  }>\n                </ListItemText>\n              </ListItem>\n            </div>\n          ))}\n      </List>\n    </div>\n  );\n};\n\nconst Routes = connect(mapStateToProps)(DelayedRoute);\n\nexport default Routes;\n","import React, {useState} from 'react';\nimport {\n  createMuiTheme, responsiveFontSizes, makeStyles, ThemeProvider,\n} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {\n  AppBar, Toolbar, Container, Button, ListItem, ListItemText,\n  Dialog, DialogTitle, DialogContent,\n} from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Brightness3Icon from '@material-ui/icons/Brightness3';\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\nimport {\n  ApolloClient, InMemoryCache, ApolloProvider,\n} from '@apollo/client';\nimport store from './store/routesStore';\nimport {setData} from './actions/setData';\nimport DelayedRoute from './components/DelayedRoute';\nimport formatTime from './functions/formatTime';\n\nwindow.store = store;\nwindow.setData = setData;\n\nconst routeClient = new ApolloClient({\n  uri: 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql',\n  cache: new InMemoryCache(),\n});\n\nconst App = React.forwardRef((props, ref) => {\n  const [brightness, setBrightness] = useState('light');\n\n  store.subscribe(() => console.log('state', store.getState()));\n\n  let customTheme = createMuiTheme({\n    palette: {\n      type: brightness,\n    },\n  });\n  customTheme = responsiveFontSizes(customTheme);\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    title: {\n      flexGrow: 1,\n      textAlign: 'center',\n    },\n    mainContent: {\n      [theme.breakpoints.up('sm')]: {\n        width: '75%',\n        margin: '0 auto',\n        padding: '30px',\n        borderRadius: '25px',\n        marginTop: '2vh',\n      },\n      textAlign: 'center',\n      backgroundColor: customTheme.palette.background.paper,\n      minHeight: '80vh',\n    },\n    entry: {\n      borderRadius: '25px',\n      margin: '10px',\n    },\n    customBtn: {\n      marginLeft: '5vh',\n    },\n    buttonDiv: {\n      marginBottom: '2vh',\n    },\n  }));\n\n  const classes = useStyles();\n\n  const [open, setOpen] = useState(false);\n  const [route, setRoute] = useState(null);\n\n  /**\n   * @return {div}\n   */\n  function MoreInfo() {\n    return (\n      <Dialog\n        onClose={handleClose}\n        aria-labelledby=\"simple-dialog-title\"\n        open={open}\n      >\n        <DialogTitle\n          id=\"simple-dialog-title\">\n          <Typography variant=\"h5\">Route info</Typography>\n        </DialogTitle>\n        <DialogContent>\n          {route ? route.legs.map((entry, index) => (\n            <div key={index} className={classes.entry}>\n              <ListItem>\n                <ListItemText\n                  primary={\n                    <React.Fragment>\n                      <Typography variant=\"h5\">\n                        {entry.mode +\n                          (entry.trip ?\n                            ' ' + entry.trip.routeShortName :\n                            '') + ' - ' +\n                            Math.ceil(entry.duration / 60) + 'min'}\n                      </Typography>\n                    </React.Fragment>\n                  }\n                  secondary={\n                    <React.Fragment>\n                      <Typography variant=\"h5\">\n                        {entry.from.stop && entry.to.stop ?\n                          entry.from.stop.name +\n                          ' - ' +\n                          entry.to.stop.name :\n                          entry.from.name +\n                          ' - ' +\n                          entry.to.name}\n                        <br />\n                        {formatTime(entry.startTime)}&nbsp;\n                      -&nbsp;{formatTime(entry.endTime)}\n                      </Typography>\n                    </React.Fragment>\n                  }>\n                </ListItemText>\n              </ListItem>\n            </div>\n          )) : <></>}\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <ApolloProvider client={routeClient}>\n      <ThemeProvider theme={customTheme}>\n        <CssBaseline />\n        <div className=\"App\">\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography>\n                  Aleksi Heikkilä, 2021\n              </Typography>\n              <Typography variant=\"h4\" className={classes.title}>\n                  Timetables App\n              </Typography>\n              {brightness === 'light' ?\n                  <Button\n                    onClick={() => setBrightness('dark')}>\n                    <Brightness3Icon />\n                  </Button> :\n                  <Button\n                    onClick={() => setBrightness('light')}>\n                    <WbSunnyIcon />\n                  </Button>}\n            </Toolbar>\n          </AppBar>\n          <main>\n            <Container className={classes.mainContent}>\n              <div>\n                <MoreInfo open={open} onClose={handleClose}></MoreInfo>\n                <DelayedRoute\n                  setRoute={setRoute}\n                  setOpen={setOpen}>\n                </DelayedRoute>\n              </div>\n            </Container>\n          </main>\n        </div>\n      </ThemeProvider>\n    </ApolloProvider>\n  );\n});\n\nexport default App;\n","// eslint-disable-next-line require-jsdoc\nexport function setData(payload) {\n  return {type: 'SET_DATA', payload};\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport store from './store/routesStore';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>\n    ,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}