{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["routeClient","ApolloClient","uri","cache","InMemoryCache","GET_ROUTE","gql","App","React","forwardRef","props","ref","useState","brightness","setBrightness","customTheme","createMuiTheme","palette","type","responsiveFontSizes","classes","makeStyles","theme","root","flexGrow","title","textAlign","mainContent","breakpoints","up","width","margin","padding","useStyles","address","setAddress","open","setOpen","route","setRoute","results","setResults","DelayedRoute","useLazyQuery","onCompleted","data","getRoute","loading","error","a","handleAddress","result","resData","features","geometry","coordinates","variables","fromLat","fromLon","TextField","autoFocus","id","label","value","onChange","target","inputProps","maxLength","Button","onClick","handleClick","Typography","variant","className","List","plan","itineraries","map","entry","index","ListItem","button","e","event","handleOpen","ListItemText","primary","Math","ceil","duration","secondary","Fragment","formatTime","startTime","endTime","time","date","Date","hours","getHours","minutes","getMinutes","MoreInfo","Dialog","onClose","handleClose","aria-labelledby","DialogTitle","DialogContent","legs","mode","trip","routeShortName","from","stop","to","name","fetch","res","json","client","ThemeProvider","CssBaseline","AppBar","position","Toolbar","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac8b25d5.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {\n  createMuiTheme, responsiveFontSizes, makeStyles, ThemeProvider,\n} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {\n  AppBar, Toolbar, Container, TextField, Button, List, ListItem, ListItemText,\n  Dialog, DialogTitle, DialogContent,\n} from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Brightness3Icon from '@material-ui/icons/Brightness3';\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\n\nimport {\n  ApolloClient, InMemoryCache, gql, ApolloProvider, useLazyQuery,\n} from '@apollo/client';\n\nconst routeClient = new ApolloClient({\n  uri: 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql',\n  cache: new InMemoryCache(),\n});\n\nconst GET_ROUTE = gql`\n  query Route($fromLat: Float!, $fromLon: Float!) {\n    plan(\n      from: {lat: $fromLat, lon: $fromLon}\n      to: {lat: 60.16736926540844, lon: 24.921782530681504}\n      numItineraries: 5\n    ) {\n      itineraries {\n        startTime\n        endTime\n        duration\n        walkDistance\n        legs {\n          startTime\n          endTime\n          mode\n          duration\n          realTime\n          distance\n          transitLeg\n          from {\n            lat\n            lon\n            name\n            stop {\n              code\n              name\n            }\n          }\n          to {\n            lat\n            lon\n            name\n            stop {\n              code\n              name\n            }\n          }\n          trip {\n            tripHeadsign\n            routeShortName\n          }\n        }\n      }\n    }\n  }`;\n\nconst App = React.forwardRef((props, ref) => {\n  const [brightness, setBrightness] = useState('light');\n\n  let customTheme = createMuiTheme({\n    palette: {\n      type: brightness,\n    },\n  });\n  customTheme = responsiveFontSizes(customTheme);\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    title: {\n      flexGrow: 1,\n      textAlign: 'center',\n    },\n    mainContent: {\n      [theme.breakpoints.up('sm')]: {\n        width: '75%',\n        margin: '0 auto',\n        padding: '30px',\n      },\n      textAlign: 'center',\n    },\n  }));\n\n  const classes = useStyles();\n\n  const [address, setAddress] = useState('');\n  const [open, setOpen] = useState(false);\n  const [route, setRoute] = useState(null);\n  const [results, setResults] = useState('');\n\n  /**\n   * @return {div}\n   */\n  function DelayedRoute() {\n    const [getRoute, {loading, error, data}] =\n    useLazyQuery(GET_ROUTE, {onCompleted: () => {\n      setResults(data);\n    }});\n\n    if (loading) return (<p>Loading...</p>);\n    if (error) return (<p>Error :(</p>);\n\n    /** */\n    async function handleClick() {\n      const result = await handleAddress();\n      const resData = result.features[0].geometry.coordinates;\n      getRoute({variables: {fromLat: resData[1], fromLon: resData[0]}});\n    }\n\n    /**\n   *@param {Object} event\n   *@param {Object} entry\n  */\n    function handleOpen(event, entry) {\n      setRoute(entry);\n      setOpen(true);\n    }\n\n    return (\n      <div>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          type=\"string\"\n          id=\"form-name\"\n          label=\"Starting address\"\n          value={address}\n          onChange={(address) => setAddress(address.target.value)}\n          inputProps={{maxLength: 100}}\n        />\n        <br />\n        <Button onClick={() => handleClick()}>\n          Get timetable\n        </Button>\n        <br />\n        <Typography variant=\"h5\" className={classes.title}>\n          {address !== '' ?\n                  address + ' - Maria 01' : <></>}\n        </Typography>\n        <br />\n        <List>\n          {results && results.plan.itineraries.map((entry, index) => (\n            <div key={index}>\n              <ListItem button onClick={((e) => handleOpen(e, entry))}>\n                <ListItemText\n                  primary={'Route ' + (index + 1) + ' ' +\n                  Math.ceil(entry.duration/60) + 'min'}\n                  secondary={\n                    <React.Fragment>\n                      {formatTime(entry.startTime)}&nbsp;\n                      -&nbsp;{formatTime(entry.endTime)}\n                    </React.Fragment>\n                  }>\n                </ListItemText>\n              </ListItem>\n            </div>\n          ))}\n        </List>\n      </div>\n    );\n  }\n\n  /**\n   *@param {Number} time\n   * @return {String}\n  */\n  function formatTime(time) {\n    const date = new Date(time);\n    let hours = date.getHours();\n    if (hours < 10) {\n      hours = '0' + hours;\n    }\n    let minutes = date.getMinutes();\n    if (minutes < 10) {\n      minutes = '0' + minutes;\n    }\n    const timeAsString = hours + ':' + minutes;\n    return timeAsString;\n  }\n\n  /**\n   * @return {div}\n   */\n  function MoreInfo() {\n    return (\n      <Dialog\n        onClose={handleClose}\n        aria-labelledby=\"simple-dialog-title\"\n        open={open}\n      >\n        <DialogTitle\n          id=\"simple-dialog-title\">\n          <Typography>Route info</Typography>\n        </DialogTitle>\n        <DialogContent>\n          {route ? route.legs.map((entry, index) => (\n            <div key={index}>\n              <ListItem>\n                <ListItemText\n                  primary={\n                    entry.mode +\n                    (entry.trip ?\n                    ' ' + entry.trip.routeShortName :\n                    '')\n                  }\n                  secondary={\n                    <React.Fragment>\n                      {entry.from.stop && entry.to.stop ?\n                      entry.from.stop.name +\n                      ' - ' +\n                      entry.to.stop.name :\n                      entry.from.name +\n                      ' - ' +\n                      entry.to.name}\n                      <br/>\n                      {formatTime(entry.startTime)}&nbsp;\n                      -&nbsp;{formatTime(entry.endTime)}\n                    </React.Fragment>\n                  }>\n                </ListItemText>\n              </ListItem>\n            </div>\n          )) : <></>}\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  /** */\n  async function handleAddress() {\n    const res = await fetch('https://api.digitransit.fi/geocoding/v1/search?text=' + address + '&size=1');\n    const data = await res.json();\n    return data;\n  }\n\n  return (\n    <ApolloProvider client={routeClient}>\n      <ThemeProvider theme={customTheme}>\n        <CssBaseline />\n        <div className=\"App\">\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h4\" className={classes.title}>\n                Timetables App\n              </Typography>\n              {brightness === 'light' ?\n                <Button\n                  onClick={() => setBrightness('dark')}>\n                  <Brightness3Icon />\n                </Button> :\n                <Button\n                  onClick={() => setBrightness('light')}>\n                  <WbSunnyIcon />\n                </Button>}\n            </Toolbar>\n          </AppBar>\n          <main>\n            <Container className={classes.mainContent}>\n              <div>\n                <MoreInfo open={open} onClose={handleClose}></MoreInfo>\n                <DelayedRoute></DelayedRoute>\n              </div>\n            </Container>\n          </main>\n        </div>\n      </ThemeProvider>\n    </ApolloProvider>\n  );\n});\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}